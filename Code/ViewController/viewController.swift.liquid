
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit
import RxSwift

class {{ prefix }}{{ module_info.name }}ViewController: UIViewController {

	private weak var itemsList: HorizontalListView!
	private weak var doneButton: UIButton!

	private var viewModel: {{ prefix }}{{ module_info.name }}ViewModel!
    private var itemsDS: HorizontalListDS!
	private var router: {{ prefix }}{{ module_info.name }}Router!

	private var bag = DisposeBag()
    private var isLoading = false
    

        convenience init(viewModel: {{ prefix }}{{ module_info.name }}ViewModel) {
		self.init()
		self.viewModel = viewModel
	}

	override func loadView() {
		let sView = {{ prefix }}{{ module_info.name }}View()
		itemsList   = sView.itemsList
		doneButton  = sView.doneButton
		self.view = sView
	}

	override func viewDidLoad() {
		super.viewDidLoad()

		router = {{ prefix }}{{ module_info.name }}Router(with: self)
        
        navigationItem.title = ""
		navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)

        configureItemsList()
        configureBindings()
	}


    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        if !isLoading {
            isLoading.toggle()
            viewModel.loadAction.execute()
        }
    }


    func configureItemsList() {
        itemsDS = HorizontalListDS(viewModel: viewModel.itemsListVM())
        itemsDS.bind(with: itemsList)
        itemsDS.update(items: viewModel.items)
        itemsDS.cellPressedBlock = {
            print("item \($0)")
        }
    }

    private func configureBindings() {
        
        viewModel.loadAction.executing.subscribe(onNext: { [unowned self] in
            self.showHUD($0)
        }).disposed(by: bag)
        
        viewModel.loadAction.errors.subscribe(onNext: { [unowned self] in
            self.errorHandler(error: $0)
        }).disposed(by: bag)
        
        viewModel.loadAction.elements.subscribe(onNext: { [unowned self] in
            self.itemsDS.update(items: $0)
        }).disposed(by: bag)
    }
    
    
    // MARK: - Actions
	@objc func showDetail() {
		print("tap")
    }
}
